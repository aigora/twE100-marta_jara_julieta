#include <stdio.h>
#include <string.h>
#define NUMCONTACTOS 100

//ESTRUCTURAS
struct contactos{
		char nombre [50];
		char telefono [50];
		char email [25];	
};

struct TAux { //Estructura auxiliar
char nombre[50];
char telefono[50];
char email[25];
};

//FUNCIONES
//Funciones de menus y logotipos
void MENU1();
void MENUCONTACTOS();
void MENUTAREAS();
void LOGOTIPO();
int LOGOTIPO1(struct contactos contacto[]); //logotipo mas lectura de fichero de contactos
//Funciones actualizar ficheros
void actualizarContactos(int dim, int contacto, struct contactos cont[]);

//PROGRAMA
int main () {
	
	struct contactos cont[NUMCONTACTOS]; 
	struct TAux aux; // estructura auxiliar para comprobar y guardar contactos
	
	int opcion1;
	int salida = 2;//Salir del programa
	int opcion2, comp1,i, k=0, j, auxx=0, ncont=0;
	
	
	ncont = LOGOTIPO1(cont); //Logotipo y obtenemos toda la informacion del fichero contactos
	
	do {
		system("cls");
		LOGOTIPO();
		MENU1();
		scanf("%d", &opcion1);
		fflush (stdin);	
		getchar();
		switch (opcion1) {
			case 1:
				do{
					system ("cls");
					LOGOTIPO();
					MENUCONTACTOS();
					scanf("%d", &opcion2);
					fflush (stdin);	
					getchar();
					switch (opcion2) {
						case 2: //guardar un contacto
							do {
								printf("Introduzca el contacto que desea guardar\n");
								scanf("%s", &aux.nombre);
								for (k = 0; k < ncont; k++) {
									comp1 = strcmp(aux.nombre, cont[k].nombre); //Compara entre todos los contactos
									if (comp1 == 0) {
									break;
									}
								}
									
								if (comp1 != 0) {
									if (ncont == NUMCONTACTOS) {
										printf("NO SE PUEDEN GUARDAR MAS CONTACTOS\n");	
									}
									else {
										strcpy(cont[ncont].nombre, aux.nombre); //guarda el nombre nuevo en contactos
										printf("Introduzca el telefono del contacto\n");
										scanf("%s", &cont[ncont].telefono, 50);
										printf("Introduzca email del contacto\n");
										scanf("%s", &cont[ncont].email, 25);
										printf("Se ha guardado %s como nuevo contacto\n", cont[ncont].nombre);
										Sleep(2000);
										k=ncont;
										ncont = ncont++;
										for (i = 0; i < ncont; i++) {
											actualizarContactos(ncont, i, cont);
										}
									} break;
								}
								else {
									printf("Ya existe un contacto con ese nombre, intente con otro nombre\n"); // para que no se guarden dos contactos con el mismo nombre
								}
								
							} while (comp1 != 0);
							break;
						
					}
				}while (opcion2 != 4);			
				break;
		
			case 2:
				printf("Aqui iria el calendario\n");
				break;
		
			case 3:
				printf("Vuelva pronto, hasta la proxima!\n");
				salida = 1;
				Sleep(1200);
				break;

			default:printf("Elija entre las opciones del menu\n");
			}//Final del menu principal	
	}while (salida == 2);//Se repite hasta que se decida salir del programa 
		for (i = 0; i < ncont; i++) {
		actualizarContactos(ncont, i, cont);
	}
}

//FUNCIONES
void MENU1() {  
	printf("\tElija entre nuestras opciones\n");
	printf("-->1. Lista de contactos\n");//MENU: Ver contactos, añadir contacto, eliminar contacto.
	printf("-->2. Calendario\n");//MENU: Ver calendario, añadir evento, eliminar evento
	printf("-->3. Salir de la agenda\n");	
	return;
}

void MENUCONTACTOS() {
	printf("\t\tZona CONTACTOS\n");
	printf("->1. Ver mis contactos\n->2. Guardar un contacto\n->3. Borrar un contacto\n->>4. Volver al menu principal\n");
	return;
}

void MENUTAREAS() {
	printf("\t\tZona TAREAS\n");
	printf("->1. Ver mis tareas\n->2. Guardar una tarea nueva\n->3. Borrar una tarea\n->>4. Volver al menu principal\n");
	return;
}

void LOGOTIPO(){
	printf("\t\t ____________________________\n");
	printf("\t\t|                            |\n");
	printf("\t\t|         BIENVENIDO         |\n");
	printf("\t\t|    A SU AGENDA PERSONAL    |\n");
	printf("\t\t|____________________________|\n");
	printf("\n\n");
}

//FICHEROS
int LOGOTIPO1(struct contactos contacto[])
{
	printf("\t\t ____________________________\n");
	printf("\t\t|                            |\n");
	printf("\t\t|         BIENVENIDO         |\n");
	printf("\t\t|    A SU AGENDA PERSONAL    |\n");
	printf("\t\t|____________________________|\n");
	printf("\n\n");
	int i, dim;

	FILE*fichero;
	errno_t error;
	printf("\nBienvenido a su agenda personal, en un momento estaran cargados sus datos\n\n");


	error = fopen_s(&fichero, "contactos.txt", "r");//Error al abrir el fichero?
	Sleep(2000);

	if (error == 0) {
		printf("Contactos cargados!\n");
		Sleep(1500);
	}
	else {
		printf("Ha habido un error %d al cargar los datos\n", error);
		return; // return sale del programa
	}
	fscanf_s(fichero, "%d", &dim);//Lee del fichero el numero de contactos
	if (dim != 0) {//Si no es 0, lee el fichero completo
		for (i = 0; i < dim; i++) {
			fscanf_s(fichero, "%s\t", contacto[i].nombre, 50);
			fscanf_s(fichero, "%s\t", contacto[i].telefono, 50);
			fscanf_s(fichero, "%s\t", contacto[i].email, 25);
		}
	}
	fclose(fichero);

	return dim;

}

void actualizarContactos(int dim, int contacto, struct contactos cont[]) {//dim numero de contactos
	FILE*fichero;
	errno_t error;

	int i;
	if (contacto == 0) {
		error = fopen_s(&fichero, "contactos.txt", "w");//Abrir reescribiendo
		if (error == 0) {//Si no hay error
			printf("Guardando datos...\n");
		}
		else {//Si hay error
			printf("Ha habido un error %d para guardar los datos.\n", error);
			return; // return sale del programa
		}

		fprintf(fichero, "%d\n", dim);//Imprime el numero de contactos alcanzado

		fclose(fichero);
	}
	error = fopen_s(&fichero, "contactos.txt", "a");//Abrir añadiendo
	if (error == 0) {//Si no hay error
					 //printf("Guardando datos...\n");
	}
	else {//Si hay error
		printf("Ha habido un error %d para guardar los datos.\n", error);
		return; // return sale del programa
	}
	fprintf(fichero, "%s\t%s\t%s\t", contacto[cont].nombre, contacto[cont].telefono, contacto[cont].email);

	fclose(fichero);

}
